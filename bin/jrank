#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__)

require 'optparse'
require 'net/http'
require 'lib/maputil'

adjust_scores = false
show_both     = false

option_parser = OptionParser.new { |opts|
  opts.on('-a', '--adjust-scores') { adjust_scores = true }
  opts.on('-b', '--show-both') { show_both = true }
}

option_parser.parse!

datab_only = adjust_scores && !show_both
datab_any  = adjust_scores || show_both

source = Net::HTTP.get('ci2.plab.interactions.net', '/cigame/?', 8080)

match_str  = '>Score</td></tr><tr>'
match_str2 = '</tr></table>'
ind        = source.index(match_str)
ind2       = source.index(match_str2, ind)

str = source[(ind+match_str.length)...ind2]

regex  = %r{</tr><tr>}
regex2 = %r{<td><a.*?>(.*?)</a></td><td>.*?</td><td>(.*?)</td>}

parts = str.split(regex)

data = {}

parts.each { |v|
  matcher = regex2.match(v)
  unless matcher.nil?
    data[matcher[1]] = matcher[2].to_f.round
  end
}

datab = {}

avg = data.values.average.round
puts "Average: #{avg}" if adjust_scores
data.keys.each { |k|
  datab[k] = data[k] - avg
}

data = data.sort_by { |k, v| -(v.abs) }

datab = datab.sort_by { |k, v| -(v.abs) }

len1 = data.max do |a, b|
  a[0].to_s.length <=> b[0].to_s.length
end

len2 = data.max do |a, b|
  a[1].to_s.length <=> b[1].to_s.length
end

len1 = len1.to_s.length
len2 = len2.to_s.length

if len1 < 4
  len1 = 4
end

if len2 < 5
  len2 = 5
end

len3 = datab.max do |a, b|
  a[1].to_s.length <=> b[1].to_s.length
end

len3 = len3.to_s.length

if len3 < 14
  len3 = 14
end

def make_line(str0, str1, str2, datab_any, datab_only, data_both, joinstr = '|')
  vals = [str0]
  vals << str2 if datab_any
  vals << str0 if data_both
  vals << str1 unless datab_only
  "#{joinstr}#{vals.join(joinstr)}#{joinstr}"
end

padding = 5

border = make_line("#{'-' * (len1+(padding*2))}", "#{'-' * (len2+(padding*2))}", "#{'-' * (len3+(padding*2))}", datab_any, datab_only, show_both, '+')

user_str   = "#{' ' * padding}#{'User'.center(len1)}#{' ' * padding}"
score_str1 = "#{' ' * padding}#{'Score'.center(len2)}#{' ' * padding}"
score_str2 = "#{' ' * padding}#{'Adjusted Score'.center(len3)}#{' ' * padding}"

puts border
puts make_line(user_str, score_str1, score_str2, datab_any, datab_only, show_both)
puts border

(0...data.count).each { |i|
  kv1 = data[i]
  kv2 = datab[i]
  puts make_line("#{' ' * padding}#{kv1[0].to_s.center(len1)}#{' ' * padding}", "#{' ' * padding}#{kv1[1].to_s.center(len2)}#{' ' * padding}", "#{' ' * padding}#{kv2[1].to_s.center(len3)}#{' ' * padding}", datab_any, datab_only, show_both)
  #puts border
}

puts border