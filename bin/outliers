#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__)

require 'optparse'
require 'lib/maputil'
require 'lib/kmeans'
require 'lib/option'

options = {
    file:         nil,
    one_per_line: false,
    delimiter:    ', ',
    sensitivity:  0.5,
    k_value:      nil,
}

delimiter_set = false

option_parser = OptionParser.new { |opts|
  Option::add_option_with_param(options, opts, ['-f', '--file FILE'], :file)
  Option::add_option(options, opts, %w(-1 --one-per-line), :one_per_line) { options[:delimiter] = nil unless delimiter_set }
  Option::add_option_with_param(options, opts, ['-d', '--delimiter [DELIMITER]'], :delimiter) { delimiter_set = true }
  Option::add_option_with_param(options, opts, ['-s', '--sensitivity LEVEL'], :sensitivity, type: Float)
  Option::add_option_with_param(options, opts, ['-k', '--k-value KVALUE'], :k_value, type: Integer)
}

option_parser.parse!

data = []

if options[:file].nil?
  val = nil
  i   = 0
  begin
    begin
      val = gets.chomp
      if val.length > 0
        data[i] = val.to_f
        i       += 1
      end
    rescue
      # ignored
    end
  end until val.nil? || val.length <= 0 || $stdin.eof?
else
  if File.exist?(options[:file])
    data = IO.readlines(options[:file]).filtermap { |v|
      begin
        f = v.chomp
        f.length == 0 || (f =~ /^\d+(\.\d+)?$/).nil? ? false : f.to_f
      rescue
        false
      end
    }
  else
    puts "File '#{options[:file]}' does not exist!"
    exit 1
  end
end

outliers = data.outliers(options[:sensitivity], options[:k_value]).sort

puts outliers.join("#{options[:delimiter]}#{options[:one_per_line] ? "\n" : ''}")