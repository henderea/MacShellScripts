#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'net/http'
require 'rubygems'
UTIL_VERSION = '>= 1.0.0'
begin
  gem 'everyday-cli-utils', UTIL_VERSION
  require 'everyday-cli-utils'
  include EverydayCliUtils
  import :maputil, :format, :kmeans, :option
rescue
  puts "You need to install my everyday-cli-utils gem version #{UTIL_VERSION} to use this script."
  exit 1
end

WEB_DOMAIN = 'enigmatic-bayou-2042.herokuapp.com'
BASE_PATH  = '/mvn2/'

default_options = { log_file: 'build.log' }

#abcd   h jklmn p  stuvw   01
#    efg i     o qr     xyz  23456789

class MyOptions
  extend OptionUtil

  default_settings toggle: true

  defaults_option 'mvn2-defaults.yaml', %w(-1 --set-defaults), desc: 'set the defaults so you can just run mvn2 without any parameters (local to each folder)'

  help_option ['--help'], desc: 'print out this help'

  option :do_timer, %w(-t --timer), desc: 'display a timer while the build is in progress'
  option :skip_tests, %w(-s --skip-tests), desc: 'skip tests'
  option :no_sticky, %w(-n --no-sticky), desc: 'make the growl notification non-sticky'
  option :display_all, %w(-a --display-all), desc: 'display all output'
  option :track_average, %w(-k --track-average), desc: 'update the average and also display a progress bar while the build is in progress'
  option :track_full_average, %w(-u --track-full-average), desc: 'update the average list and also display a progress bar while the build is in progress'
  option :colored, %w(-c --colored), desc: 'display some colors in the timer/progress message'
  option :write_log, %w(-l --write-log), desc: 'write all of the output to a log file'
  option_with_param :log_file, ['--log-file'], desc: 'set the log file name'
  option :advanced_average, %w(-d --advanced-average), desc: 'use k-means (with minimum optimal k) to find a list of averages and use the closest one for the progress bar and displayed average'
  option_with_param :command_override, ['--command-override'], desc: 'override the maven command (disables average tracking options and skip test option)'
  option :package, %w(-p --package), desc: 'run "mvn clean package" (with optional "-D skipTests")'
  option :hide_between, %w(-h --hide-between), desc: 'hide the output between the end of test results (the line starting with "Tests run:") and the next trigger line'
  option :show_average, %w(-w --show-average), desc: 'show the average(s) before and after the build (average tracking must be enabled)'
  option :block_update, %w(-b --block-update), desc: 'block the average feature from updating the file(s)'
  option :override_colors, %w(-v --override-colors), desc: 'override the colors with the ones configured by the colorconfig script'
  option :show_projects, %w(-j --show-projects), desc: 'show the "Building <project>" lines when outputting'
  option_with_param :run_before, ['--run-before'], desc: 'run a command before calling the maven build'
  option_with_param :run_after, ['--run-after'], desc: 'run a command after finishing the maven build'
  option_with_param :run_success, ['--run-success'], desc: 'run a command after finishing a successful maven build'
  option_with_param :run_failure, ['--run-failure'], desc: 'run a command after finishing an unsuccessful maven build'
  option :low_mem, %w(-m --low-mem), desc: 'use a lower memory footprint method of looping through the output'
  option :exception, %w(-e --exception), desc: 'add the "-e -X" options to the mvn call'
  option :live_print, %w(-0 --live-print), desc: 'print filtered lines as they are outputted by maven'
  option_with_param :mobile_number, ['--mobile-number'], desc: 'use the mobile number `NUM` (with country code and nothing other than digits) (country code for US is 1) as the recipient of a text message indicating the success or failure of a build and the name of the immediate folder of the build (requires gem nexmo)'
  option :advanced_text, %w(-2 --advanced-text), desc: 'upload the folder name, build time so far, and estimated percent complete (based on stored averages) to a server so that you can text 13179120742 (the number you get the build completion texts from) to get the status(es) of your ongoing build(s).  If you send the exact name of the folder (case-sensitive, only 1 at a time), it will only reply with entries matching that build.  If you text anything that does not exactly match a folder name, it will simply reply with all of the ongoing build statuses.  It identifies your builds by your mobile number, so make sure you\'re texting from the number you used as the parameter to the `--mobile-number NUM` option.'
end

MyOptions.default_options default_options

MyOptions.parse!

options = MyOptions.options

Signal.trap('SIGINT') {
  puts "\nBuild Canceled\n\n"
  exit 1
}

class String
  def start_with_any?(*strs)
    strs.empty? ? false : strs.any? { |str| start_with?(str) }
  end
end

color_opts = {
    time:    {
        fg: :green,
        bg: :none,
    },
    percent: {
        fg: :purple,
        bg: :none,
    },
    average: {
        fg: :cyan,
        bg: :none,
    },
}

config_file = File.expand_path('~/mvn2-colors.yaml')

if options[:override_colors] && File.exist?(config_file)
  color_opts = YAML::load_file(config_file)
end

def read_page(path)
  begin
    return Net::HTTP.get(WEB_DOMAIN, "#{BASE_PATH}#{path}")
  rescue
    # ignored
  end
  nil
end

class Mvn2
  HEADLESS    = ' -Djava.awt.headless=true'
  INFO_LINE   = '[INFO] ------------------------------------------------------------------------'
  BUILD_REGEX = /\[INFO\] Building (?!(jar|war|zip))/

  def initialize(options, color_opts)
    @options    = options
    @color_opts = color_opts
    setup_cmd
  end

  def setup_cmd
    st   = @options[:skip_tests] ? ' -D skipTests' : ''
    cmd2 = @options[:package] ? 'package' : 'install'
    exc  = @options[:exception] ? ' -e -X' : ''
    @cmd = @options[:command_override].nil? ? "mvn clean #{cmd2}#{st}#{exc}#{HEADLESS} 2>&1" : "mvn #{@options[:command_override]}#{exc}#{HEADLESS} 2>&1"
  end

  def full_avg_file
    pkg = @options[:package] ? '-package' : ''
    @options[:skip_tests] ? "avg-skip#{pkg}.txt" : "avg-test#{pkg}.txt"
  end

  def float_filter(line)
    begin
      f = line.chomp
      f.length == 0 || (f =~ /^\d+(\.\d+)?$/).nil? ? false : f.to_f
    rescue
      false
    end
  end

  def read_full_avg
    average   = @average
    file_name = full_avg_file
    if @options[:command_override].nil? && @options[:track_full_average] && File.exist?(file_name)
      lines   = IO.readlines(file_name)
      data    = lines.filtermap { |line| float_filter(line) }
      average = data.average
    end
    average
  end

  def read_advanced_avg
    averages  = [@average]
    file_name = full_avg_file
    if @options[:command_override].nil? && @options[:track_full_average] && @options[:advanced_average] && File.exist?(file_name)
      lines    = IO.readlines(file_name)
      data     = lines.filtermap { |line| float_filter(line) }
      averages = data.nmeans
    end
    averages
  end

  def update_full_avg
    unless @options[:block_update]
      @options[:command_override].nil? && @options[:track_full_average] && (@result || !@options[:skip_tests])

      if @result || (!@options[:skip_tests] && @diff >= @average / 2.0)
        file = File.new(full_avg_file, 'a+')
        file.puts(@diff)
        file.close
      end
    end
  end

  def get_data(averages, counts, lines, ind)
    if lines.count > ind
      parts         = lines[ind].chomp.split(';')
      averages[ind] = parts[0].to_f
      counts[ind]   = parts[1].to_i
      averages[ind] = 0 if counts[ind] == 0
    end
  end

  def read_avg
    average  = 0
    averages = [0, 0, 0, 0]
    counts   = [0, 0, 0, 0]
    if @options[:command_override].nil? && @options[:track_average] && File.exist?('avg.txt')
      lines = IO.readlines('avg.txt')
      get_data(averages, counts, lines, 0)
      get_data(averages, counts, lines, 1)
      get_data(averages, counts, lines, 2)
      get_data(averages, counts, lines, 3)
      pkg     = @options[:package] ? 2 : 0
      average = averages[(@options[:skip_tests] ? 0 : 1) + pkg]
    end
    return average, averages, counts
  end

  def calc_new_avg(ind)
    sum             = @averages2[ind] * @counts[ind] + @diff
    @counts[ind]    += 1
    @averages2[ind] = sum / @counts[ind]
  end

  def update_avg
    unless @options[:block_update]
      if @options[:command_override].nil? && @options[:track_average] && (@result || !@options[:skip_tests])

        if @result || @diff >= @average / 2.0
          @options[:skip_tests] ? calc_new_avg(0) : calc_new_avg(1)
          IO.write('avg.txt', "#{@averages2[0]};#{@counts[0]}\n#{@averages2[1]};#{@counts[1]}\n#{@averages2[2]};#{@counts[2]}\n#{@averages2[3]};#{@counts[3]}")
        end
      end
    end
  end

  def colorize_if_should(text, colors)
    @options[:colored] ? Format::colorize(text, colors[:fg], colors[:bg]) : text
  end

  def get_avg_message(amin, asec, avg, diff, m, s)
    progress           = ((diff.to_f / avg.to_f) * 100.0)
    bars               = [progress.floor, 100].min
    colorized_time     = colorize_if_should("#{m}:#{s}", @color_opts[:time])
    colorized_progress = colorize_if_should("~#{'%.3f' % progress}%", @color_opts[:percent])
    colorized_average  = colorize_if_should("#{amin}:#{asec}", @color_opts[:average])
    "[#{'=' * bars}>#{' ' * (100 - bars)}] #{colorized_time} (#{colorized_progress}) (average: #{colorized_average})"
  end

  def get_closest(time)
    @averages.min { |a, b| (a - time).abs <=> (b - time).abs }
  end

  def get_timer_message(start_time, time)
    diff       = time - start_time
    avg        = get_closest(diff)
    amin, asec = get_time_parts(avg)
    m, s       = get_time_parts(diff)
    (avg == 0) ? colorize_if_should("#{m}:#{s}", @color_opts[:time]) : get_avg_message(amin, asec, avg, diff, m, s)
  end

  def get_time_parts(time)
    return (time / 60.0).floor, '%06.3f' % (time % 60)
  end

  def filter_line(found, info_line_last, l, puts_prefix = '')
    line = l.chomp
    begin
      if @options[:show_projects] && line =~ BUILD_REGEX
        puts "#{puts_prefix}#{INFO_LINE}" unless info_line_last
        puts "#{puts_prefix}#{line}"
        puts "#{puts_prefix}#{INFO_LINE}"
        info_line_last = true
      elsif @options[:hide_between] && found && line.start_with?('Tests run:')
        puts "#{puts_prefix}#{line}\n\n"
        found          = false
        info_line_last = false
      elsif found
        puts "#{puts_prefix}#{line}"
        info_line_last = line.start_with?(INFO_LINE)
      elsif line.start_with_any?('[ERROR] COMPILATION ERROR :', 'Results :')
        puts "#{puts_prefix}#{line}"
        found          = true
        info_line_last = false
      elsif line.start_with_any?('[INFO] BUILD SUCCESS', '[INFO] Reactor Summary:', '[INFO] BUILD FAILURE')
        puts "#{puts_prefix}#{INFO_LINE}" unless info_line_last
        puts "#{puts_prefix}#{line}"
        found          = true
        info_line_last = false
      end
    rescue
      puts "#{puts_prefix}#{line}"
    end
    return found, info_line_last
  end

  def output_lines
    IO.write(@options[:log_file], @output) if @options[:write_log]
    found          = false
    info_line_last = false
    if @options[:low_mem]
      @output.each_line { |l| found, info_line_last = filter_line(found, info_line_last, l) }

      @output.each_line { |line| puts line } unless found
    else
      lines = @output.lines.chompall
      @output.clear

      lines.each { |l| found, info_line_last = filter_line(found, info_line_last, l) }

      lines.each { |line| puts line } unless found
    end
  end

  def start_timer_thread
    Thread.new(@time1) { |start_time|
      while true
        print "\r#{get_timer_message(start_time, Time.now)}"
        sleep(0.05)
      end
    }
  end

  def start_timer_thread2
    Thread.new(@time1) { |start_time|
      begin
        path = Dir.getwd
        path = path[(path.rindex('/')+1)..-1]
        id   = read_page("create?phone=#{@options[:mobile_number]}&name=#{path}")
        while true
          sleep(2.5)
          diff     = Time.now - start_time
          avg      = get_closest(diff)
          progress = (diff / avg) * 100.0
          read_page("update?id=#{id}&time=#{diff}&progress=#{progress}")
        end
      ensure
        read_page("remove?id=#{id}")
      end
    }
  end

  def show_averages
    unless @averages.empty? || (@averages.length == 1 && @averages[0] == 0)
      strs = @averages.map { |a|
        m, s = get_time_parts(a)
        "#{m}:#{s}"
      }
      puts "Average(s): #{strs.join(', ')}"
    end
  end

  def run_and_filter_output
    @average, @averages2, @counts = read_avg
    @average                      = read_full_avg
    @averages                     = read_advanced_avg
    show_averages if @options[:show_average]
    @time1  = Time.now
    thread  = @options[:do_timer] ? start_timer_thread : nil
    thread2 = @options[:advanced_text] ? start_timer_thread2 : nil

    if @options[:live_print]
      found          = false
      info_line_last = false
      @result        = false
      begin
        log_file = @options[:write_log] ? File.open(@options[:log_file], 'w+') : nil
        IO.popen(@cmd).each do |l|
          log_file << l unless log_file.nil?
          found, info_line_last = filter_line(found, info_line_last, l, "\r\e[2K")
          @result               = true if l.chomp.start_with?('[INFO] BUILD SUCCESS')
        end
      ensure
        log_file.close unless log_file.nil?
      end
    else
      @output = `#{@cmd}`
      @result = $?.success?
    end

    time2 = Time.now
    @diff = time2 - @time1

    update_avg
    update_full_avg

    unless thread.nil?
      thread.kill
      print "\n"
    end

    unless thread2.nil?
      thread2.kill
    end

    if @options[:show_average]
      @average, _, _ = read_avg
      @average       = read_full_avg
      @averages      = read_advanced_avg
      show_averages
    end

    output_lines unless @options[:live_print]
  end

  def run_cmd(cmd)
    unless cmd.nil?
      puts "$ #{cmd}"
      `#{cmd}`
      print "\n"
    end
  end

  def run
    run_cmd(@options[:run_before])
    @options[:display_all] ? system(@cmd) : run_and_filter_output
    run_cmd(@options[:run_after])
    if @result
      run_cmd(@options[:run_success])
    else
      run_cmd(@options[:run_failure])
    end

    message_text  = "#{(@options[:command_override].nil? ? (@options[:skip_tests] ? 'Build' : 'Tests') : 'Operation')} #{(@result ? 'Successful' : 'Failed')}"
    message_title = @cmd[0...(-5-HEADLESS.length)]

    unless @options[:mobile_number].nil?
      begin
        require 'nexmo'
      rescue LoadError
        puts 'You need to run \'gem install nexmo\' to use this feature'
        exit 1
      end
      path = Dir.getwd
      path = path[(path.rindex('/')+1)..-1]

      sms_message = "#{path}: #{message_text}"

      nexmo = Nexmo::Client.new('8c3b6e7d', 'a1d2ac24')

      nexmo.send_message!({ :to => @options[:mobile_number], :from => '13179120742', :text => sms_message })
    end

    begin
      `growlnotify -n Terminal -a Terminal#{(@options[:no_sticky] ? '' : ' -s')} -m "#{message_text}" -t "#{message_title}" 2>&1`
    end until $?.success?
  end
end

Mvn2.new(options, color_opts).run